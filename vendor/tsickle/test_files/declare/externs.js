/**
 * @externs
 * @suppress {checkTypes,const,duplicate,missingOverride}
 */
// NOTE: generated by tsickle, do not edit.
// Generated from: test_files/declare/declare.d.ts
/** @const */
var DeclareTestModule = {};
/** @const */
DeclareTestModule.inner = {};
/** @type {boolean} */
DeclareTestModule.inner.someBool;
/**
 * @record
 * @struct
 */
DeclareTestModule.Foo = function() {};
/** @type {string} */
DeclareTestModule.Foo.prototype.field;

/**
 * @public
 * @param {string} a
 * @return {number}
 */
DeclareTestModule.Foo.prototype.method = function(a) {};

/** @typedef {function(new:DeclareTestModule.Foo, string)} */
DeclareTestModule.FooConstructor;

/**
 * @param {string} f
 * @return {!DeclareTestModule.Foo}
 */
DeclareTestModule.makeFoo = function(f) {};
/** @type {function(new:DeclareTestModule.Foo, string)} */
DeclareTestModule.fooMaker;

/**
 * @constructor
 * @struct
 * @public
 * @param {number} a
 */
DeclareTestModule.Clazz = function(a) {};
/** @type {function(new:DeclareTestModule.Foo, string)} */
DeclareTestModule.Clazz.prototype.makeFoo;
/** @type {function(new:DeclareTestModule.Foo, string)} */
DeclareTestModule.Clazz.prototype.makeFoo2;
/** @type {number} */
DeclareTestModule.Clazz.field;

/**
 * Comment
 * @public
 * @param {string} a
 * @return {number}
 */
DeclareTestModule.Clazz.prototype.method = function(a) {};

/**
 * @public
 * @param {string} a
 * @return {number}
 */
DeclareTestModule.Clazz.staticMethod = function(a) {};
/**
 * @constructor
 * @struct
 */
DeclareTestModule.Example = function() {};

/**
 * @public
 * @return {number}
 */
DeclareTestModule.Example.methodA = function() {};

/**
 * @public
 * @return {string}
 */
DeclareTestModule.Example.prototype.methodA = function() {};
/**
 * @record
 * @struct
 */
DeclareTestModule.NotYetHandled = function() {};

/* TODO: IndexSignature: DeclareTestModule */

/** @typedef {(string|number)} */
DeclareTestModule.TypeAlias;
// Derived from: declare module "DeclareTest-QuotedModule"
/** @const */
var DeclareTest_QuotedModule = {};
/** @type {string} */
DeclareTest_QuotedModule.foo;
/** @type {number} */
var declareGlobalVar;

/**
 * @param {string} x
 * @return {number}
 */
function declareGlobalFunction(x) {}
/**
 * @record
 * @struct
 */
function DeclareTestInterface() {}
/** @type {string} */
DeclareTestInterface.prototype.foo;

/**
 * @constructor
 * @struct
 * @public
 * @param {number=} a
 */
function MultipleConstructors(a) {}

/**
 * @public
 * @return {?}
 */
Object.prototype.myMethod = function() {};

/**
 * @param {string|number} x_or_y
 * @param {string=} x
 * @return {!CodeMirror.Editor}
 */
function CodeMirror(x_or_y, x) {}
/**
 * @record
 * @struct
 */
CodeMirror.Editor = function() {};
/** @type {string} */
CodeMirror.Editor.prototype.name;

/**
 * @param {string|number} url_or_status
 * @param {string|number=} url_or_status1
 * @return {void}
 */
function redirect(url_or_status, url_or_status1) {}

/**
 * @param {number} a
 * @param {...?|string} b
 * @return {string}
 */
function TestOverload(a, b) {}

/**
 * @param {number} a
 * @param {...?|(undefined|string)} b
 * @return {void}
 */
function TestOverload2(a, b) {}
/**
 * @record
 * @struct
 */
function BareInterface() {}
/** @type {string} */
BareInterface.prototype.name;

/**
 * @param {string} tsickle_arguments
 * @return {?}
 */
function usesArguments(tsickle_arguments) {}

/**
 * @param {?} __0
 * @return {?}
 */
function destructures(__0) {}

/** @enum {number} */
var ChartType = {
  line: 1,
  bar: 1,
};

/**
 * @template T
 * @constructor
 * @struct
 * @public
 * @param {T} t
 */
function Container(t) {}
/** @type {T} */
Container.prototype.value;
/**
 * @record
 * @struct
 */
function OptionalAny() {}
/** @type {?|undefined} */
OptionalAny.prototype.optionalAny;
/** @type {(undefined|string)} */
OptionalAny.prototype.optionalString;
// Generated from: test_files/declare/declare_module.d.ts
/** @const */
var test_files$declare$declare_module = {};
/** @type {string} */
var moduleGlobalX;
/**
 * @constructor
 * @struct
 */
function ModuleGlobalClass() {}
/** @const */
var moduleGlobalNamespace = {};
/** @type {string} */
moduleGlobalNamespace.y;
/**
 * @constructor
 * @struct
 */
moduleGlobalNamespace.GlobalNamespaced = function() {};
/** @type {string} */
test_files$declare$declare_module.moduleExported;
/** @type {string} */
test_files$declare$declare_module.moduleUnexported;
// Generated from: test_files/declare/declare_nondts.ts
/** @const */
var test_files$declare$declare_nondts = {};
/** @type {number} */
var declaredInPlainTS;
